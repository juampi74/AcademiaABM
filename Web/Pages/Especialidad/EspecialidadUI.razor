@page "/especialidad"
@page "/especialidad/{idEspecialidad:int}"

@inject SweetAlertService Swal;
@inject NavigationManager navegacion;

<h2 class="mt-3">@titulo</h2>

@if (!errorBD)
{
    <EditForm Model="especialidad" OnValidSubmit="GuardarEspecialidad">
        <DataAnnotationsValidator></DataAnnotationsValidator>

        <div class="mt-4">
            <label class="form-label fw-bold">Descripcion</label>
            <InputText class="form-control" @bind-Value="especialidad.Desc_especialidad" @oninput="ValidarDescripcion"></InputText>
            @if (errorDescripcionInvalida)
            {
                <div class="text-danger mt-2">La descripción debe tener más de 10 caracteres.</div>
            }
        </div>

        <div class="d-flex align-items-center justify-content-end mt-3">
            <a class="btn btn-warning" href="especialidades">Volver</a>

            <button class="btn btn-primary ms-2" type="submit" disabled="@botonDeshabilitado">
                @btnTexto
            </button>
        </div>

    </EditForm>
}
else
{
    <div class="alert alert-danger fw-bold my-4" role="alert">
        Error al conectarse a la base de datos!
    </div>
    <div class="d-flex justify-content-end">
        <a class="btn btn-warning" href="especialidades">Volver</a>
    </div>
}



@code {
    [Parameter]
    public int idEspecialidad { get; set; } = 0;

    string titulo = string.Empty;
    string btnTexto = string.Empty;

    Especialidad especialidad = new Especialidad();

    bool errorBD = false;

    bool errorDescripcionInvalida = false;

    bool botonDeshabilitado = false;

    protected override async Task OnInitializedAsync()
    {
        if (idEspecialidad != 0)
        {
            titulo = "Editar Especialidad";
            btnTexto = "Actualizar";

            try
            {
                especialidad = await EspecialidadNegocio.GetOne(idEspecialidad);

            }
            catch (Exception)
            {
                errorBD = true;
            }
        }
        else
        {
            titulo = "Nueva Especialidad";
            btnTexto = "Guardar";

            botonDeshabilitado = true;
        }
    }

    private void ValidarDescripcion(ChangeEventArgs e)
    {
        string? descripcion = e.Value?.ToString();

        if (descripcion == null || descripcion.Length < 10)
        {
            errorDescripcionInvalida = true;
            botonDeshabilitado = true;
        }
        else
        {
            errorDescripcionInvalida = false;
            botonDeshabilitado = false;
        }
    }

    private async Task GuardarEspecialidad()
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se guardaran los cambios realizados",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "Cancelar",
                ConfirmButtonText = "Confirmar"
            });

        if (result.IsConfirmed)
        {
            if (idEspecialidad != 0)
            {
                EspecialidadDTO especialidadDTO = new EspecialidadDTO();
                especialidadDTO.Desc_especialidad = especialidad.Desc_especialidad;

                HttpResponseMessage response = await EspecialidadNegocio.Update(idEspecialidad, especialidadDTO);

                if (response.StatusCode == HttpStatusCode.OK)
                {
                    await Swal.FireAsync("Especialidad actualizada", "La especialidad ha sido actualizada correctamente", SweetAlertIcon.Success);
                }
                else if (response.StatusCode == HttpStatusCode.BadRequest)
                {
                    await Swal.FireAsync("Error", "La operación no se ha podido llevar a cabo", SweetAlertIcon.Error);
                }
                else if (response.StatusCode == HttpStatusCode.ServiceUnavailable)
                {
                    await Swal.FireAsync("Error", "Error al conectarse a la base de datos!", SweetAlertIcon.Error);
                }
            }
            else
            {
                HttpResponseMessage response = await EspecialidadNegocio.Add(especialidad);

                if (response.StatusCode == HttpStatusCode.Created)
                {
                    await Swal.FireAsync("Especialidad creada", "La especialidad ha sido creada correctamente", SweetAlertIcon.Success);
                }
                else if (response.StatusCode == HttpStatusCode.BadRequest)
                {
                    await Swal.FireAsync("Error", "La operación no se ha podido llevar a cabo", SweetAlertIcon.Error);
                }
                else if (response.StatusCode == HttpStatusCode.ServiceUnavailable)
                {
                    await Swal.FireAsync("Error", "Error al conectarse a la base de datos!", SweetAlertIcon.Error);
                }
            }
            navegacion.NavigateTo("/especialidades");
        }
    }
}