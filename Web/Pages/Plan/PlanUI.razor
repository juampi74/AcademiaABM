@page "/plan"
@page "/plan/{idPlan:int}"

@using Web.Pages.Autenticacion;

@inject SweetAlertService Swal;
@inject NavigationManager navegacion;

@inject AuthService AuthService;

@if (cargando)
{
    <img class="pb-2" style="width:35px" src="https://media.tenor.com/On7kvXhzml4AAAAj/loading-gif.gif" />
}
else if (!rolAutorizado)
{
    <Unauthorized />
}
else
{
    <h2 class="mt-2">@titulo</h2>

    @if (!errorBD)
    {
        if (!errorFaltanEntidades)
        {
            <EditForm Model="plan" OnValidSubmit="GuardarPlan">
                <DataAnnotationsValidator></DataAnnotationsValidator>

                <div class="mt-4">
                    <label class="form-label fw-bold">Descripcion</label>
                    <InputText class="form-control" @bind-Value="plan.Desc_plan" @oninput="ValidarDescripcion"></InputText>
                    @if (errorDescripcionInvalida)
                    {
                        <div class="text-danger mt-2">La descripción debe tener más de 5 caracteres.</div>
                    }
                </div>

                <div class="mt-4">
                    <label class="form-label fw-bold">Especialidad</label>
                    <InputSelect class="form-select" @bind-Value="plan.Id_especialidad" disabled="@camposDeshabilitados">
                        @foreach (var especialidad in especialidades)
                        {
                            <option value="@especialidad.Id_especialidad">@especialidad.Desc_especialidad</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => plan.Id_especialidad)"></ValidationMessage>
                </div>

                <div class="d-flex align-items-center justify-content-end mt-3">
                    <a class="btn btn-warning" href="planes">Volver</a>

                    <button class="btn btn-primary ms-2" type="submit" disabled="@botonDeshabilitado">
                        @btnTexto
                    </button>
                </div>

            </EditForm>
        }
        else
        {
            <div class="alert alert-warning fw-bold my-4" role="alert">
                Debe haber al menos una especialidad registrada previamente!
            </div>
            <div class="d-flex justify-content-end">
                <a class="btn btn-dark" href="planes">Volver</a>
            </div>
        }
    }
    else
    {
        <div class="alert alert-danger fw-bold my-3" role="alert">
            Error al conectarse a la base de datos!
        </div>
        <div class="d-flex justify-content-end">
            <a class="btn btn-dark" href="planes">Volver</a>
        </div>
    }
}

@code {
    [Parameter]
    public int idPlan { get; set; } = 0;

    bool cargando = true;
    bool rolAutorizado = false;

    string titulo = string.Empty;
    string btnTexto = string.Empty;

    Plan plan = new Plan();
    List<Especialidad> especialidades = new List<Especialidad>();

    bool errorBD = false;
    bool errorFaltanEntidades = false;

    bool errorDescripcionInvalida = false;

    bool botonDeshabilitado = false;

    bool camposDeshabilitados = false;

    protected override async Task OnInitializedAsync()
    {
        var authResult = await AuthService.IsAuthenticatedAsync();

        if (!authResult.IsAuthenticated)
        {
            navegacion.NavigateTo("/login");
        }
        else
        {
            if (authResult.Rol != "2")
            {
                rolAutorizado = false;
            }
            else
            {
                rolAutorizado = true;

                if (idPlan != 0)
                {
                    titulo = "Editar Plan";
                    btnTexto = "Actualizar";

                    try
                    {
                        plan = await PlanNegocio.GetOne(idPlan);

                        especialidades = (List<Especialidad>) await EspecialidadNegocio.GetAll();

                        camposDeshabilitados = true;
                    }
                    catch (Exception)
                    {
                        errorBD = true;
                    }
                }
                else
                {
                    titulo = "Nuevo Plan";
                    btnTexto = "Guardar";

                    botonDeshabilitado = true;

                    try
                    {
                        especialidades = (List<Especialidad>) await EspecialidadNegocio.GetAll();
                    }
                    catch (Exception)
                    {
                        errorBD = true;
                    }

                    if (especialidades.Any())
                    {
                        especialidades = especialidades.OrderBy(esp => esp.Desc_especialidad).ToList();

                        plan.Id_especialidad = especialidades.First().Id_especialidad;
                    }
                    else
                    {
                        errorFaltanEntidades = true;
                    }
                }
            }
            
            cargando = false;
        }
    }

    private void ValidarDescripcion(ChangeEventArgs e)
    {
        string? descripcion = e.Value?.ToString();

        if (descripcion == null || descripcion.Length < 5)
        {
            errorDescripcionInvalida = true;
            botonDeshabilitado = true;
        }
        else
        {
            errorDescripcionInvalida = false;
            botonDeshabilitado = false;
        }
    }

    private async Task GuardarPlan()
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se guardaran los cambios realizados",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "Cancelar",
                ConfirmButtonText = "Confirmar"
            });

        if (result.IsConfirmed)
        {
            if (idPlan != 0)
            {
                PlanDTO planDTO = new PlanDTO();

                planDTO.Desc_plan = plan.Desc_plan;
                planDTO.Id_especialidad = plan.Id_especialidad;

                HttpResponseMessage response = await PlanNegocio.Update(idPlan, planDTO);

                if (response.StatusCode == HttpStatusCode.OK)
                {
                    await Swal.FireAsync("Plan actualizado", "El plan ha sido actualizado correctamente", SweetAlertIcon.Success);
                }
                else if (response.StatusCode == HttpStatusCode.BadRequest)
                {
                    await Swal.FireAsync("Error", "La operación no se ha podido llevar a cabo", SweetAlertIcon.Error);
                }
                else if (response.StatusCode == HttpStatusCode.ServiceUnavailable)
                {
                    await Swal.FireAsync("Error", "Error al conectarse a la base de datos!", SweetAlertIcon.Error);
                }
            }
            else
            {
                if (plan.Id_especialidad == 0)
                {
                    plan.Id_especialidad = especialidades.First().Id_especialidad;
                }

                HttpResponseMessage response = await PlanNegocio.Add(plan);

                if (response.StatusCode == HttpStatusCode.Created)
                {
                    await Swal.FireAsync("Plan creado", "El plan ha sido creado correctamente", SweetAlertIcon.Success);
                }
                else if (response.StatusCode == HttpStatusCode.BadRequest)
                {
                    await Swal.FireAsync("Error", "La operación no se ha podido llevar a cabo", SweetAlertIcon.Error);
                }
                else if (response.StatusCode == HttpStatusCode.ServiceUnavailable)
                {
                    await Swal.FireAsync("Error", "Error al conectarse a la base de datos!", SweetAlertIcon.Error);
                }
            }
            navegacion.NavigateTo("/planes");
        }
    }
}