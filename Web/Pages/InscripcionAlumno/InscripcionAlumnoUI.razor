@page "/inscripcion-alumno"
@page "/inscripcion-alumno/{idInscripcion:int}"

@using Web.Pages.Autenticacion;

@inject SweetAlertService Swal;
@inject NavigationManager navegacion;

@inject AuthService AuthService;

@if (cargando)
{
    <img class="pb-2" style="width:35px" src="https://media.tenor.com/On7kvXhzml4AAAAj/loading-gif.gif" />
}
else if (!rolAutorizado)
{
    <Unauthorized />
}
else
{
    <h2 class="mt-2">@titulo</h2>

    @if (!errorBD)
    {
        @if (!errorFaltanEntidades)
        {
            <EditForm Model="inscripcion" OnValidSubmit="GuardarInscripcion">
                <DataAnnotationsValidator></DataAnnotationsValidator>

                <div class="mt-4">
                    <label class="form-label fw-bold">Curso</label>
                    <InputSelect class="form-select" @bind-Value="inscripcion.Id_curso">
                        @foreach (var curso in cursos)
                        {
                            <option value="@curso.Id_curso">@curso.Materia.Desc_materia ➡️ @curso.Comision.Desc_comision</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => inscripcion.Id_curso)"></ValidationMessage>
                </div>

                <div class="d-flex align-items-center justify-content-end mt-3">
                    <a class="btn btn-warning" href="inscripciones-alumno">Volver</a>
                    <button class="btn btn-primary ms-2" type="submit">
                        @btnTexto
                    </button>
                </div>

            </EditForm>
        }
        else
        {
            <div class="alert alert-warning fw-bold my-3" role="alert">
                No hay cursos registrados!
            </div>
            <div class="d-flex justify-content-end">
                <a class="btn btn-dark" href="inscripciones-alumno">Volver</a>
            </div>
        }
    }
    else
    {
        <div class="alert alert-danger fw-bold my-3" role="alert">
            Error al conectarse a la base de datos!
        </div>
        <div class="d-flex justify-content-end">
            <a class="btn btn-dark" href="inscripciones-alumno">Volver</a>
        </div>
    }
}

@code {
    [Parameter]
    public int idInscripcion { get; set; } = 0;

    bool cargando = true;
    bool rolAutorizado = false;

    string titulo = string.Empty;
    string btnTexto = string.Empty;

    Alumno_Inscripcion inscripcion = new Alumno_Inscripcion();
    List<Curso> cursos = new List<Curso>();

    bool errorBD = false;
    bool errorFaltanEntidades = false;

    string id_persona = "";

    protected override async Task OnInitializedAsync()
    {
        var authResult = await AuthService.IsAuthenticatedAsync();

        this.id_persona = authResult.IdPersona;

        if (!authResult.IsAuthenticated)
        {
            navegacion.NavigateTo("/login");
        }
        else
        {
            if (authResult.Rol != "0")
            {
                rolAutorizado = false;
            }
            else
            {
                rolAutorizado = true;

                titulo = "Nueva Inscripcion";
                btnTexto = "Guardar";
                inscripcion.Condicion = "Inscripto";
                inscripcion.Nota = 0;
                inscripcion.Id_alumno = int.Parse(this.id_persona);

                try
                {
                    cursos = (List<Curso>) await CursoNegocio.GetCursosParaPersona(id_persona);
                }
                catch (Exception)
                {
                    errorBD = true;
                }

                if (cursos.Any())
                {
                    cursos = cursos.OrderBy(cur => cur.Materia.Desc_materia).ThenBy(cur => cur.Comision.Desc_comision).ToList();

                    inscripcion.Id_curso = cursos.First().Id_curso;
                }
                else
                {
                    errorFaltanEntidades = true;
                }
            }

            cargando = false;
        }
    }

    private async Task GuardarInscripcion()
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se registrará su inscripción al curso",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "Cancelar",
                ConfirmButtonText = "Confirmar"
            });

        if (result.IsConfirmed)
        {
            if (inscripcion.Id_curso == 0)
            {
                inscripcion.Id_curso = cursos.First().Id_curso;
            }

            HttpResponseMessage response = await InscripcionNegocio.Add(inscripcion);

            if (response.StatusCode == HttpStatusCode.Created)
            {
                await Swal.FireAsync("Inscripcion creada", "Se ha inscripto correctamente al curso", SweetAlertIcon.Success);
            }
            else if (response.StatusCode == HttpStatusCode.Conflict)
            {
                var mensaje = (await response.Content.ReadAsStringAsync()).Trim('"');

                if (mensaje != "El curso no tiene más cupos disponibles")
                {
                    mensaje = "Ya estás inscripto al curso";
                }

                await Swal.FireAsync("Error", mensaje, SweetAlertIcon.Error);
            }
            else if (response.StatusCode == HttpStatusCode.BadRequest)
            {
                await Swal.FireAsync("Error", "La operación no se ha podido llevar a cabo", SweetAlertIcon.Error);
            }
            else if (response.StatusCode == HttpStatusCode.ServiceUnavailable)
            {
                await Swal.FireAsync("Error", "Error al conectarse a la base de datos!", SweetAlertIcon.Error);
            }
            navegacion.NavigateTo("inscripciones-alumno");
        }
    }
}