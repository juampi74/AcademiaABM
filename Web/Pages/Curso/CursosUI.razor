@page "/cursos"

@inject SweetAlertService Swal;

@if (!error)
{
    @if (cursos == null)
    {
        <div class="d-flex align-items-center mt-3">
            <h2 class="me-3">Cursos</h2>
            <img class="pb-2" style="width:35px" src="https://media.tenor.com/On7kvXhzml4AAAAj/loading-gif.gif" />
        </div>
    }
    else
    {
        <div class="d-flex align-items-center justify-content-between mt-3">
            <h2>Cursos</h2>
            <a href="curso">
                <img class="pb-2" src="/assets/add.png" style="width: 60px; height: 60px" />
            </a>
        </div>

        <input @bind="busqueda" @bind:event="oninput" type="text" placeholder="Buscar por Comision o Materia..." class="form-control mb-3 busqueda-input" />

        IEnumerable<Curso> cursosFilt = cursosFiltrados();

        @if (!cursosFilt.Any())
        {
            <div class="alert alert-primary fw-bold mt-3" role="alert">
                No hay cursos registrados o no hay resultados que coincidan con la búsqueda.
            </div>
        }
        else
        {
            <table class="table mt-3">
                <thead>
                    <tr>
                        <th>Año Calendario</th>
                        <th>Cupo</th>
                        <th>Comision</th>
                        <th>Materia</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var curso in cursosFilt)
                    {
                        <tr>
                            <td style="vertical-align: middle;">@curso.Anio_calendario</td>
                            <td style="vertical-align: middle;">@curso.Cupo</td>
                            <td style="vertical-align: middle;">@curso.Comision.Desc_comision</td>
                            <td style="vertical-align: middle;">@curso.Materia.Desc_materia</td>
                            <td class="d-flex justify-content-end">
                                <a class="btn btn-primary btn-sm" href="curso/@curso.Id_curso">
                                    <i class="bi bi-pencil-square fs-5"></i>
                                </a>
                                <button class="btn btn-danger btn-sm ms-2" @onclick="(() => EliminarCurso(curso))">
                                    <i class="bi bi-trash-fill fs-5"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    }
}
else
{
    <h2 class="mt-3">Cursos</h2>
    <div class="alert alert-danger fw-bold my-3" role="alert">
        Error al conectarse a la base de datos!
    </div>
    <div class="d-flex justify-content-end">
        <button class="btn btn-primary" @onclick="OnInitializedAsync">Reintentar</button>
    </div>
}


@code {
    IEnumerable<Curso> cursos;
    string busqueda = "";
    bool error;

    protected override async Task OnInitializedAsync()
    {
        await CargarCursos();
    }

    private async Task CargarCursos()
    {
        cursos = null;
        error = false;

        try
        {
            cursos = await CursoNegocio.GetAll();
        }
        catch (Exception)
        {
            error = true;
        }
    }

    private IEnumerable<Curso> cursosFiltrados()
    {
        if (string.IsNullOrWhiteSpace(busqueda))
        {
            return cursos ?? new List<Curso>();
        }

        return cursos?.Where(cur =>
               cur.Comision.Desc_comision.Contains(busqueda, StringComparison.OrdinalIgnoreCase) ||
               cur.Materia.Desc_materia.Contains(busqueda, StringComparison.OrdinalIgnoreCase))
            ?? new List<Curso>();
    }

    private async Task EliminarCurso(Curso curso)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Esta acción no se puede revertir",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                CancelButtonText = "Cancelar",
                ConfirmButtonText = "Confirmar"
            });

        if (result.IsConfirmed)
        {
            HttpResponseMessage response = await CursoNegocio.Delete(curso);

            if (response.StatusCode == HttpStatusCode.OK)
            {
                await Swal.FireAsync("Curso eliminado", "El curso ha sido eliminado correctamente", SweetAlertIcon.Success);

                // Eliminar el curso de la lista localmente para evitar una recarga completa
                cursos = cursos.Where(cur => cur.Id_curso != curso.Id_curso);
            }
            else if (response.StatusCode == HttpStatusCode.BadRequest)
            {
                await Swal.FireAsync("Error", "El curso tiene inscripciones y/o dictados asociados", SweetAlertIcon.Error);
            }
            else if (response.StatusCode == HttpStatusCode.ServiceUnavailable)
            {
                error = true;
            }
        }
    }
}