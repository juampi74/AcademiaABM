@page "/curso"
@page "/curso/{idCurso:int}"

@using Web.Pages.Autenticacion;

@inject SweetAlertService Swal;
@inject NavigationManager navegacion;

@inject AuthService AuthService;

@if (cargando)
{
    <img class="pb-2" style="width:35px" src="https://media.tenor.com/On7kvXhzml4AAAAj/loading-gif.gif" />
}
else if (!rolAutorizado)
{
    <Unauthorized />
}
else
{
    <h2 class="mt-2">@titulo</h2>

    @if (!errorBD)
    {
        @if (!errorFaltanEntidades)
        {
            <EditForm Model="curso" OnValidSubmit="GuardarCurso">
                <DataAnnotationsValidator></DataAnnotationsValidator>

                <div class="mt-4">
                    <label class="form-label fw-bold">Año Calendario</label>
                    <InputNumber class="form-control" @bind-Value="curso.Anio_calendario" @oninput="ValidarAnio" disabled="@camposDeshabilitados"></InputNumber>
                    @if (errorAnioInvalido)
                    {
                        <div class="text-danger mt-2">El año debe corresponder al actual o al siguiente.</div>
                    }
                </div>

                <div class="mt-4">
                    <label class="form-label fw-bold">Cupo</label>
                    <InputNumber class="form-control" @bind-Value="curso.Cupo" @oninput="ValidarCupo"></InputNumber>
                    @if (errorCupoInvalido)
                    {
                        <div class="text-danger mt-2">El cupo debe ser un número entre 1 y 100.</div>
                    }
                </div>

                <div class="mt-4">
                    <label class="form-label fw-bold">Comision</label>
                    <InputSelect class="form-select" @bind-Value="SelectedComisionID" disabled="@camposDeshabilitados">
                        @foreach (var comision in comisiones)
                        {
                            <option value="@comision.Id_comision">@comision.Desc_comision</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => curso.Id_comision)"></ValidationMessage>
                </div>

                <div class="mt-4">
                    <label class="form-label fw-bold">Materia</label>
                    <InputSelect class="form-select" @bind-Value="curso.Id_materia" disabled="@camposDeshabilitados">
                        @foreach (var materia in materias)
                        {
                            <option value="@materia.Id_materia">@materia.Desc_materia</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => curso.Id_materia)"></ValidationMessage>
                </div>

                <div class="d-flex align-items-center justify-content-end mt-3">
                    <a class="btn btn-warning" href="cursos">Volver</a>

                    <button class="btn btn-primary ms-2" type="submit" disabled="@botonDeshabilitado">
                        @btnTexto
                    </button>
                </div>

            </EditForm>
        }
        else
        {
            <div class="alert alert-warning fw-bold my-3" role="alert">
                Debe haber al menos una comisión y una materia registradas previamente!
            </div>
            <div class="d-flex justify-content-end">
                <a class="btn btn-dark" href="cursos">Volver</a>
            </div>
        }
    }
    else
    {
        <div class="alert alert-danger fw-bold my-3" role="alert">
            Error al conectarse a la base de datos!
        </div>
        <div class="d-flex justify-content-end">
            <a class="btn btn-dark" href="cursos">Volver</a>
        </div>
    }
}

@code {
    [Parameter]
    public int idCurso { get; set; } = 0;

    bool cargando = true;
    bool rolAutorizado = false;

    string titulo = string.Empty;
    string btnTexto = string.Empty;

    Curso curso = new Curso();
    List<Comision> comisiones = new List<Comision>();
    List<Materia> materias = new List<Materia>();

    bool errorBD = false;
    bool errorFaltanEntidades = false;

    bool errorAnioInvalido = false;
    bool errorCupoInvalido = false;

    bool botonDeshabilitado = false;

    bool anioModificado = false;
    bool cupoModificado = false;

    bool camposDeshabilitados = false;

    private int _selectedComisionID;
    public int SelectedComisionID
    {
        get => _selectedComisionID;
        set
        {
            if (_selectedComisionID != value)
            {
                _selectedComisionID = value;
                OnComisionSelected().ConfigureAwait(false);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authResult = await AuthService.IsAuthenticatedAsync();

        if (!authResult.IsAuthenticated)
        {
            navegacion.NavigateTo("/login");
        }
        else
        {
            if (authResult.Rol != "2")
            {
                rolAutorizado = false;
            }
            else
            {
                rolAutorizado = true;

                if (idCurso != 0)
                {
                    titulo = "Editar Curso";
                    btnTexto = "Actualizar";

                    try
                    {
                        curso = await CursoNegocio.GetOne(idCurso);

                        comisiones = (List<Comision>) await ComisionNegocio.GetAll();

                        SelectedComisionID = curso.Id_comision;

                        camposDeshabilitados = true;
                    }
                    catch (Exception)
                    {
                        errorBD = true;
                    }
                }
                else
                {
                    titulo = "Nuevo Curso";
                    btnTexto = "Guardar";

                    botonDeshabilitado = true;

                    try
                    {
                        comisiones = (List<Comision>) await ComisionNegocio.GetAll();

                        if (comisiones.Any())
                        {
                            comisiones = comisiones.OrderBy(com => com.Desc_comision).ToList();

                            SelectedComisionID = comisiones.First().Id_comision;
                            curso.Id_comision = SelectedComisionID;
                            materias = await CargarMaterias();

                        }
                        else
                        {
                            errorFaltanEntidades = true;
                        }
                    }
                    catch (Exception)
                    {
                        errorBD = true;
                    }
                }
            }
        
            cargando = false;
        }
    }

    private async Task OnComisionSelected()
    {
        curso.Id_comision = SelectedComisionID;
        materias = await CargarMaterias();
        StateHasChanged();
    }

    private async Task<List<Materia>> CargarMaterias()
    {
        var materias_plan = (List<Materia>) await MateriaNegocio.GetMateriasParaComision(curso.Id_comision.ToString());

        if (materias_plan.Any())
        {
            materias_plan = materias_plan.OrderBy(mat => mat.Desc_materia).ToList();

            if (idCurso != 0)
            {
                var materia = materias_plan.FirstOrDefault(mat => mat.Id_materia == curso.Id_materia);
                
                curso.Id_materia = materia.Id_materia;
            
            }
            else
            {
                curso.Id_materia = materias_plan.First().Id_materia;
            }
        }

        return materias_plan;
    }


    private void ValidarAnio(ChangeEventArgs e)
    {
        anioModificado = true;

        if (int.TryParse(e.Value?.ToString(), out int anio))
        {
            int anioActual = DateTime.Now.Year;

            errorAnioInvalido = anio != anioActual && anio != (anioActual + 1);
        }
        else
        {
            errorAnioInvalido = true;
        }

        ActualizarEstadoBoton();
    }


    private void ValidarCupo(ChangeEventArgs e)
    {
        cupoModificado = true;

        if (int.TryParse(e.Value?.ToString(), out int cupo))
        {
            errorCupoInvalido = cupo < 1 || cupo > 100;
        }
        else
        {
            errorCupoInvalido = true;
        }

        ActualizarEstadoBoton();
    }

    private void ActualizarEstadoBoton()
    {
        if (idCurso != 0)
        {
            botonDeshabilitado = errorAnioInvalido || errorCupoInvalido;
        }
        else
        {
            botonDeshabilitado = errorAnioInvalido || errorCupoInvalido ||
                                   !anioModificado || !cupoModificado;
        }
    }

    private async Task GuardarCurso()
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se guardaran los cambios realizados",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "Cancelar",
                ConfirmButtonText = "Confirmar"
            });

        if (result.IsConfirmed)
        {
            if (idCurso != 0)
            {
                CursoDTO cursoDTO = new CursoDTO();

                cursoDTO.Anio_calendario = curso.Anio_calendario;
                cursoDTO.Cupo = curso.Cupo;
                cursoDTO.Id_comision = curso.Id_comision;
                cursoDTO.Id_materia = curso.Id_materia;

                HttpResponseMessage response = await CursoNegocio.Update(idCurso, cursoDTO);

                if (response.StatusCode == HttpStatusCode.OK)
                {
                    await Swal.FireAsync("Curso actualizado", "El curso ha sido actualizado correctamente", SweetAlertIcon.Success);
                }
                else if (response.StatusCode == HttpStatusCode.BadRequest)
                {
                    await Swal.FireAsync("Error", "La operación no se ha podido llevar a cabo", SweetAlertIcon.Error);
                }
                else if (response.StatusCode == HttpStatusCode.ServiceUnavailable)
                {
                    await Swal.FireAsync("Error", "Error al conectarse a la base de datos!", SweetAlertIcon.Error);
                }
            }
            else
            {
                if (curso.Id_comision == 0)
                {
                    curso.Id_comision = comisiones.First().Id_comision;
                }

                if (curso.Id_materia == 0)
                {
                    curso.Id_materia = materias.First().Id_materia;
                }

                HttpResponseMessage response = await CursoNegocio.Add(curso);

                if (response.StatusCode == HttpStatusCode.Created)
                {
                    await Swal.FireAsync("Curso creado", "El curso ha sido creado correctamente", SweetAlertIcon.Success);
                }
                else if (response.StatusCode == HttpStatusCode.BadRequest)
                {
                    await Swal.FireAsync("Error", "La operación no se ha podido llevar a cabo", SweetAlertIcon.Error);
                }
                else if (response.StatusCode == HttpStatusCode.ServiceUnavailable)
                {
                    await Swal.FireAsync("Error", "Error al conectarse a la base de datos!", SweetAlertIcon.Error);
                }
            }
            navegacion.NavigateTo("/cursos");
        }
    }
}