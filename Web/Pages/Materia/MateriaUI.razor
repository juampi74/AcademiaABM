@page "/materia"
@page "/materia/{idMateria:int}"

@inject SweetAlertService Swal;
@inject NavigationManager navegacion;

<h2 class="mt-3">@titulo</h2>

@if (!errorBD)
{
    if (!errorFaltanEntidades)
    {
        <EditForm Model="materia" OnValidSubmit="GuardarMateria">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <div class="mt-4">
                <label class="form-label fw-bold">Descripcion</label>
                <InputText class="form-control" @bind-Value="materia.Desc_materia"></InputText>
                <ValidationMessage For="@(() => materia.Desc_materia)"></ValidationMessage>
            </div>

            <div class="mt-4">
                <label class="form-label fw-bold">Horas Semanales</label>
                <InputNumber class="form-control" @bind-Value="materia.Hs_semanales"></InputNumber>
                <ValidationMessage For="@(() => materia.Hs_semanales)"></ValidationMessage>
            </div>

            <div class="mt-4">
                <label class="form-label fw-bold">Horas Totales</label>
                <InputNumber class="form-control" @bind-Value="materia.Hs_totales"></InputNumber>
                <ValidationMessage For="@(() => materia.Hs_totales)"></ValidationMessage>
            </div>

            <div class="mt-4">
                <label class="form-label fw-bold">Plan</label>
                <InputSelect class="form-select" @bind-Value="materia.Id_plan">
                    @foreach (var plan in planes)
                    {
                        <option value="@plan.Id_plan">@plan.Desc_plan ➡️ @plan.Especialidad.Desc_especialidad</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => materia.Id_plan)"></ValidationMessage>
            </div>

            <div class="d-flex align-items-center justify-content-end mt-3">
                <a class="btn btn-warning" href="materias">Volver</a>

                <button class="btn btn-primary ms-2" type="submit">
                    @btnTexto
                </button>
            </div>

        </EditForm>
    }
    else
    {
        <div class="alert alert-warning fw-bold my-4" role="alert">
            Debe haber al menos un plan registrado previamente!
        </div>
        <div class="d-flex justify-content-end">
            <a class="btn btn-warning" href="materias">Volver</a>
        </div>
    }
}
else
{
    <div class="alert alert-danger fw-bold my-4" role="alert">
        Error al conectarse a la base de datos!
    </div>
    <div class="d-flex justify-content-end">
        <a class="btn btn-warning" href="materias">Volver</a>
    </div>
}



@code {
    [Parameter]
    public int idMateria { get; set; } = 0;

    string titulo = string.Empty;
    string btnTexto = string.Empty;

    Materia materia = new Materia();
    List<Plan> planes = new List<Plan>();

    bool errorBD = false;
    bool errorFaltanEntidades = false;

    protected override async Task OnInitializedAsync()
    {
        if (idMateria != 0)
        {
            titulo = "Editar Materia";
            btnTexto = "Actualizar";

            try
            {
                materia = await MateriaNegocio.GetOne(idMateria);

                planes = (List<Plan>) await PlanNegocio.GetAll();

            }
            catch (Exception)
            {
                errorBD = true;
            }
        }
        else
        {
            titulo = "Nueva Materia";
            btnTexto = "Guardar";

            try
            {
                planes = (List<Plan>) await PlanNegocio.GetAll();

            }
            catch (Exception)
            {
                errorBD = true;
            }
        }

        if (planes.Any())
        {
            planes = planes.OrderBy(plan => plan.Desc_plan).ThenBy(plan => plan.Especialidad.Desc_especialidad).ToList();
        }
        else
        {
            errorFaltanEntidades = true;
        }
    }

    private async Task GuardarMateria()
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se guardaran los cambios realizados",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "Cancelar",
                ConfirmButtonText = "Confirmar"
            });

        if (result.IsConfirmed)
        {
            if (idMateria != 0)
            {
                MateriaDTO materiaDTO = new MateriaDTO();
                materiaDTO.Desc_materia = materia.Desc_materia;
                materiaDTO.Hs_semanales = materia.Hs_semanales;
                materiaDTO.Hs_totales = materia.Hs_totales;
                materiaDTO.Id_plan = materia.Id_plan;

                HttpResponseMessage response = await MateriaNegocio.Update(idMateria, materiaDTO);

                if (response.StatusCode == HttpStatusCode.OK)
                {
                    await Swal.FireAsync("Materia actualizada", "La materia ha sido actualizada correctamente", SweetAlertIcon.Success);
                }
                else if (response.StatusCode == HttpStatusCode.BadRequest)
                {
                    await Swal.FireAsync("Error", "La operación no se ha podido llevar a cabo", SweetAlertIcon.Error);
                }
                else if (response.StatusCode == HttpStatusCode.ServiceUnavailable)
                {
                    await Swal.FireAsync("Error", "Error al conectarse a la base de datos!", SweetAlertIcon.Error);
                }
            }
            else
            {
                if (materia.Id_plan == 0)
                {
                    materia.Id_plan = planes.First().Id_plan;
                }

                HttpResponseMessage response = await MateriaNegocio.Add(materia);

                if (response.StatusCode == HttpStatusCode.Created)
                {
                    await Swal.FireAsync("Materia creada", "La materia ha sido creada correctamente", SweetAlertIcon.Success);
                }
                else if (response.StatusCode == HttpStatusCode.BadRequest)
                {
                    await Swal.FireAsync("Error", "La operación no se ha podido llevar a cabo", SweetAlertIcon.Error);
                }
                else if (response.StatusCode == HttpStatusCode.ServiceUnavailable)
                {
                    await Swal.FireAsync("Error", "Error al conectarse a la base de datos!", SweetAlertIcon.Error);
                }

            }
            navegacion.NavigateTo("/materias");
        }
    }
}