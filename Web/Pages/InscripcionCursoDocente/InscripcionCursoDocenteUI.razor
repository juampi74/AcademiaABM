@page "/inscripcion-curso-docente/{idInscripcion:int}"

@using Web.Pages.Autenticacion;

@inject SweetAlertService Swal;
@inject NavigationManager navegacion;

@inject AuthService AuthService;

@if (cargando)
{
    <img class="pb-2" style="width:35px" src="/assets/loading.gif" />
}
else if (!rolAutorizado)
{
    <Unauthorized />
}
else
{
    <h2 class="mt-2">@titulo</h2>

    @if (!errorBD)
    {
        <EditForm Model="inscripcion" OnValidSubmit="GuardarInscripcion">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <div class="mt-4">
                <label class="form-label fw-bold">Alumno</label>
                <InputSelect class="form-select" @bind-Value="inscripcion.Id_alumno" disabled>
                    @foreach (var alumno in alumnos)
                    {
                        <option value="@alumno.Id_persona">@alumno.Apellido, @alumno.Nombre</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => inscripcion.Id_alumno)"></ValidationMessage>
            </div>

            <div class="mt-4">
                <label class="form-label fw-bold">Curso</label>
                <InputSelect class="form-select" @bind-Value="inscripcion.Id_curso" disabled>
                    @foreach (var curso in cursos)
                    {
                        <option value="@curso.Id_curso">@curso.Materia.Desc_materia ➡️ @curso.Comision.Desc_comision</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => inscripcion.Id_curso)"></ValidationMessage>
            </div>

            <div class="mt-4">
                <label class="form-label fw-bold">Nota</label>
                <InputNumber class="form-control" @bind-Value="inscripcion.Nota" @oninput="CalcularCondicion"></InputNumber>
                @if (errorNotaInvalida)
                {
                    <div class="text-danger mt-2">Por favor, ingrese una nota válida entre 1 y 10.</div>
                }
            </div>

            <div class="mt-4">
                <label class="form-label fw-bold">Condicion</label>
                <InputText class="form-control" @bind-Value="condicionCalculada" disabled></InputText>
            </div>

            <div class="d-flex align-items-center justify-content-end mt-3">
                <a class="btn btn-warning" href="inscripciones-cursos-docente">Volver</a>
                <button class="btn btn-primary ms-2" type="submit">
                    @btnTexto
                </button>
            </div>

        </EditForm>
    }
    else
    {
        <div class="alert alert-danger fw-bold my-3" role="alert">
            Error al conectarse a la base de datos!
        </div>
        <div class="d-flex justify-content-end">
            <a class="btn btn-dark" href="inscripciones-cursos-docente">Volver</a>
        </div>
    }
}

@code {
    [Parameter]
    public int idInscripcion { get; set; }

    bool cargando = true;
    bool rolAutorizado = false;

    string titulo = string.Empty;
    string btnTexto = string.Empty;

    Alumno_Inscripcion inscripcion = new Alumno_Inscripcion();
    List<Persona> alumnos = new List<Persona>();
    List<Curso> cursos = new List<Curso>();

    bool errorBD = false;
    bool errorNotaInvalida = false;
    bool botonDeshabilitado = true;
    string condicionCalculada = "";

    string id_persona = "";

    protected override async Task OnInitializedAsync()
    {
        var authResult = await AuthService.IsAuthenticatedAsync();

        this.id_persona = authResult.IdPersona;

        if (!authResult.IsAuthenticated)
        {
            navegacion.NavigateTo("/login");
        }
        else
        {
            if (authResult.Rol != "1")
            {
                rolAutorizado = false;
            }
            else
            {
                rolAutorizado = true;

                titulo = "Editar Inscripcion";
                btnTexto = "Actualizar";

                try
                {
                    inscripcion = await InscripcionNegocio.GetOne(idInscripcion);
                    condicionCalculada = inscripcion.Condicion;

                    alumnos = (List<Persona>) await PersonaNegocio.GetAll();
                    cursos = (List<Curso>) await CursoNegocio.GetAll();

                }
                catch (Exception)
                {
                    errorBD = true;
                }
            }
            cargando = false;
        }
    }

    private void CalcularCondicion(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int nota))
        {
            if (nota < 1 || nota > 10)
            {
                errorNotaInvalida = true;
                condicionCalculada = "Nota fuera de rango";
                botonDeshabilitado = true;
            }
            else
            {
                errorNotaInvalida = false;
                condicionCalculada = (nota < 4) ? "Libre" : (nota < 6) ? "Regular" : "Aprobado";
                botonDeshabilitado = false;
            }
            inscripcion.Condicion = condicionCalculada;
        }
        else
        {
            errorNotaInvalida = true;
            condicionCalculada = "Nota invalida";
            botonDeshabilitado = true;
        }
    }

    private async Task GuardarInscripcion()
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se registrará su inscripción al curso",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "Cancelar",
                ConfirmButtonText = "Confirmar"
            });

        if (result.IsConfirmed)
        {
            Alumno_InscripcionDTO inscripcionDTO = new Alumno_InscripcionDTO();

            inscripcionDTO.Condicion = inscripcion.Condicion;
            inscripcionDTO.Nota = inscripcion.Nota;
            inscripcionDTO.Id_alumno = inscripcion.Id_alumno;
            inscripcionDTO.Id_curso = inscripcion.Id_curso;

            HttpResponseMessage response = await InscripcionNegocio.Update(idInscripcion, inscripcionDTO);

            if (response.StatusCode == HttpStatusCode.OK)
            {
                await Swal.FireAsync("Inscripcion actualizada", "La inscripcion ha sido actualizada correctamente", SweetAlertIcon.Success);
            }
            else if (response.StatusCode == HttpStatusCode.BadRequest)
            {
                await Swal.FireAsync("Error", "La operación no se ha podido llevar a cabo", SweetAlertIcon.Error);
            }
            else if (response.StatusCode == HttpStatusCode.ServiceUnavailable)
            {
                await Swal.FireAsync("Error", "Error al conectarse a la base de datos!", SweetAlertIcon.Error);
            }
            navegacion.NavigateTo("inscripciones-cursos-docente");
        }
    }
}