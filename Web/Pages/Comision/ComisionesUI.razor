@page "/comisiones"

@using Web.Pages.Autenticacion;

@inject SweetAlertService Swal;
@inject NavigationManager navegacion;

@inject AuthService AuthService;

@if (cargando)
{
    <img class="pb-2" style="width:35px" src="https://media.tenor.com/On7kvXhzml4AAAAj/loading-gif.gif" />
}
else if (!rolAutorizado)
{
    <Unauthorized />
}
else
{
    @if (!error)
    {
        @if (comisiones == null)
        {
            <div class="d-flex align-items-center">
                <h2 class="me-3">Comisiones</h2>
                <img class="pb-2" style="width:35px" src="https://media.tenor.com/On7kvXhzml4AAAAj/loading-gif.gif" />
            </div>
        }
        else
        {
            <div class="d-flex align-items-center justify-content-between">
                <h2>Comisiones</h2>
                <a href="comision">
                    <img class="pb-2" src="/assets/add.png" style="width: 60px; height: 60px" />
                </a>
            </div>

            <input @bind="busqueda" @bind:event="oninput" type="text" placeholder="Buscar por Descripcion, Plan o Especialidad..." class="form-control mt-2 mb-4 busqueda-input" />

            IEnumerable<Comision> comisionesFilt = comisionesFiltradas();

            @if (!comisionesFilt.Any())
            {
                <div class="alert alert-primary fw-bold mt-3" role="alert">
                    No hay comisiones registradas o no hay resultados que coincidan con la búsqueda.
                </div>
            }
            else
            {
                <table class="table mt-3">
                    <thead>
                        <tr>
                            <th>Descripcion</th>
                            <th>Año Especialidad</th>
                            <th>Plan</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var comision in comisionesFilt)
                        {
                            <tr>
                                <td style="vertical-align: middle;">@comision.Desc_comision</td>
                                <td style="vertical-align: middle;">@comision.Anio_especialidad</td>
                                <td style="vertical-align: middle;">@comision.Plan.Desc_plan ➡️ @comision.Plan.Especialidad.Desc_especialidad</td>
                                <td class="d-flex justify-content-end">
                                    <a class="btn btn-primary btn-sm" href="comision/@comision.Id_comision">
                                        <i class="bi bi-pencil-square fs-5"></i>
                                    </a>
                                    <button class="btn btn-danger btn-sm ms-2" @onclick="(() => EliminarComision(comision))">
                                        <i class="bi bi-trash-fill fs-5"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        }
    }
    else
    {
        <h2 class="mt-3">Comisiones</h2>
        <div class="alert alert-danger fw-bold my-3" role="alert">
            Error al conectarse a la base de datos!
        </div>
        <div class="d-flex justify-content-end">
            <a class="btn btn-dark" href="/">Volver</a>
        </div>
    }
}

@code {
    IEnumerable<Comision> comisiones;
    string busqueda = "";
    bool error;

    bool cargando = true;
    bool rolAutorizado = false;

    protected override async Task OnInitializedAsync()
    {
        var authResult = await AuthService.IsAuthenticatedAsync();

        if (!authResult.IsAuthenticated)
        {
            navegacion.NavigateTo("/login");

        }
        else
        {
            if (authResult.Rol != "2")
            {
                rolAutorizado = false;

            } else
            {
                rolAutorizado = true;
                await CargarComisiones();
            }
        }

        cargando = false;
    }

    private async Task CargarComisiones()
    {
        comisiones = null;
        error = false;

        try
        {
            comisiones = await ComisionNegocio.GetAll();
        }
        catch (Exception)
        {
            error = true;
        }
    }

    private IEnumerable<Comision> comisionesFiltradas()
    {
        if (string.IsNullOrWhiteSpace(busqueda))
        {
            return comisiones ?? new List<Comision>();
        }

        return comisiones?.Where(com =>
               com.Desc_comision.Contains(busqueda, StringComparison.OrdinalIgnoreCase) ||
               com.Plan.Desc_plan.Contains(busqueda, StringComparison.OrdinalIgnoreCase) ||
               com.Plan.Especialidad.Desc_especialidad.Contains(busqueda, StringComparison.OrdinalIgnoreCase))
            ?? new List<Comision>();
    }

    private async Task EliminarComision(Comision comision)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Esta acción no se puede revertir",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                CancelButtonText = "Cancelar",
                ConfirmButtonText = "Confirmar"
            });

        if (result.IsConfirmed)
        {
            HttpResponseMessage response = await ComisionNegocio.Delete(comision);

            if (response.StatusCode == HttpStatusCode.OK)
            {
                await Swal.FireAsync("Comisión eliminada", "La comisión ha sido eliminada correctamente", SweetAlertIcon.Success);

                await CargarComisiones();
            }
            else if (response.StatusCode == HttpStatusCode.BadRequest)
            {
                await Swal.FireAsync("Error", "La comisión tiene cursos asociados", SweetAlertIcon.Error);
            }
            else if (response.StatusCode == HttpStatusCode.ServiceUnavailable)
            {
                error = true;
            }
        }
    }
}