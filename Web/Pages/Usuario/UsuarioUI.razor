@page "/usuario"
@page "/usuario/{idUsuario:int}"

@inject SweetAlertService Swal;
@inject NavigationManager navegacion;

<h2 class="mt-3">@titulo</h2>

@if (!errorBD)
{
    if (!errorFaltanEntidades)
    {
        <EditForm Model="usuario" OnValidSubmit="GuardarUsuario">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <div class="mt-4">
                <label class="form-label fw-bold">Nombre de Usuario</label>
                <InputText class="form-control" @bind-Value="usuario.Nombre_usuario"></InputText>
                <ValidationMessage For="@(() => usuario.Nombre_usuario)"></ValidationMessage>
            </div>

            <div class="mt-4">
                <label class="form-label fw-bold">Clave</label>
                <InputText class="form-control" @bind-Value="usuario.Clave"></InputText>
                <ValidationMessage For="@(() => usuario.Clave)"></ValidationMessage>
            </div>

            <div class="mt-4">
                <label class="form-label fw-bold">Habilitado</label>
                <InputSelect class="form-select" @bind-Value="usuario.Habilitado">
                    <option value="1">Si</option>
                    <option value="0">No</option>
                </InputSelect>
                <ValidationMessage For="@(() => usuario.Habilitado)"></ValidationMessage>
            </div>

            <div class="mt-4">
                <label class="form-label fw-bold">Cambia Clave</label>
                <InputSelect class="form-select" @bind-Value="usuario.Cambia_clave">
                    <option value="1">Si</option>
                    <option value="0">No</option>
                </InputSelect>
                <ValidationMessage For="@(() => usuario.Cambia_clave)"></ValidationMessage>
            </div>

            <div class="mt-4">
                <label class="form-label fw-bold">Persona</label>
                <InputSelect class="form-select" @bind-Value="usuario.Id_persona">
                    @foreach (var persona in personas)
                    {
                        <option value="@persona.Id_persona">@persona.Apellido, @persona.Nombre</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => usuario.Id_persona)"></ValidationMessage>
            </div>

            <div class="d-flex align-items-center justify-content-end mt-3">
                <a class="btn btn-warning" href="usuarios">Volver</a>

                <button class="btn btn-primary ms-2" type="submit">
                    @btnTexto
                </button>
            </div>

        </EditForm>
    }
    else
    {
        <div class="alert alert-warning fw-bold my-4" role="alert">
            Debe haber al menos una persona registrada previamente!
        </div>
        <div class="d-flex justify-content-end">
            <a class="btn btn-warning" href="usuarios">Volver</a>
        </div>
    }
}
else
{
    <div class="alert alert-danger fw-bold my-4" role="alert">
        Error al conectarse a la base de datos!
    </div>
    <div class="d-flex justify-content-end">
        <a class="btn btn-warning" href="usuarios">Volver</a>
    </div>
}


@code {
    [Parameter]
    public int idUsuario { get; set; } = 0;

    string titulo = string.Empty;
    string btnTexto = string.Empty;

    Usuario usuario = new Usuario();
    List<Persona> personas = new List<Persona>();

    bool errorBD = false;
    bool errorFaltanEntidades = false;

    protected override async Task OnInitializedAsync()
    {
        if (idUsuario != 0)
        {
            titulo = "Editar Usuario";
            btnTexto = "Actualizar";

            try
            {
                usuario = await UsuarioNegocio.GetOne(idUsuario);

                personas = (List<Persona>) await PersonaNegocio.GetAll();

            }
            catch (Exception)
            {
                errorBD = true;
            }
        }
        else
        {
            titulo = "Nuevo Usuario";
            btnTexto = "Guardar";

            try
            {
                personas = (List<Persona>) await PersonaNegocio.GetAll();

            }
            catch (Exception)
            {
                errorBD = true;
            }
        }

        if (personas.Any())
        {
            personas = personas.OrderBy(per => per.Apellido).ThenBy(per => per.Nombre).ToList();
        }
        else
        {
            errorFaltanEntidades = true;
        }
    }

    private async Task GuardarUsuario()
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se guardaran los cambios realizados",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "Cancelar",
                ConfirmButtonText = "Confirmar"
            });

        if (result.IsConfirmed)
        {
            if (idUsuario != 0)
            {
                UsuarioDTO usuarioDTO = new UsuarioDTO();
                usuarioDTO.Nombre_usuario = usuario.Nombre_usuario;
                usuarioDTO.Clave = usuario.Clave;
                usuarioDTO.Habilitado = usuario.Habilitado;
                usuarioDTO.Cambia_clave = usuario.Cambia_clave;
                usuarioDTO.Id_persona = usuario.Id_persona;

                HttpResponseMessage response = await UsuarioNegocio.Update(idUsuario, usuarioDTO);

                if (response.StatusCode == HttpStatusCode.OK)
                {
                    await Swal.FireAsync("Usuario actualizado", "El usuario ha sido actualizado correctamente", SweetAlertIcon.Success);
                }
                else if (response.StatusCode == HttpStatusCode.BadRequest)
                {
                    await Swal.FireAsync("Error", "La operación no se ha podido llevar a cabo", SweetAlertIcon.Error);
                }
                else if (response.StatusCode == HttpStatusCode.ServiceUnavailable)
                {
                    await Swal.FireAsync("Error", "Error al conectarse a la base de datos!", SweetAlertIcon.Error);
                }
            }
            else
            {
                if (usuario.Habilitado != 0 && usuario.Habilitado != 1)
                {
                    usuario.Habilitado = 1;
                }
                if (usuario.Cambia_clave != 0 && usuario.Cambia_clave != 1)
                {
                    usuario.Cambia_clave = 0;
                }
                if (usuario.Id_persona == 0)
                {
                    usuario.Id_persona = personas.First().Id_persona;
                }

                HttpResponseMessage response = await UsuarioNegocio.Add(usuario);

                if (response.StatusCode == HttpStatusCode.Created)
                {
                    await Swal.FireAsync("Usuario creado", "El usuario ha sido creado correctamente", SweetAlertIcon.Success);
                }
                else if (response.StatusCode == HttpStatusCode.BadRequest)
                {
                    await Swal.FireAsync("Error", "La operación no se ha podido llevar a cabo", SweetAlertIcon.Error);
                }
                else if (response.StatusCode == HttpStatusCode.ServiceUnavailable)
                {
                    await Swal.FireAsync("Error", "Error al conectarse a la base de datos!", SweetAlertIcon.Error);
                }
            }
            navegacion.NavigateTo("/usuarios");
        }
    }
}