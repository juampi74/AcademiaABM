@page "/usuario"
@page "/usuario/{idUsuario:int}"

@using Entidades;
@using Negocio;
@using CurrieTechnologies.Razor.SweetAlert2

@inject SweetAlertService Swal;
@inject NavigationManager navegacion;

<h2 class="mt-3">@titulo</h2>

<EditForm Model="usuario" OnValidSubmit="GuardarUsuario">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="mt-4">
        <label class="form-label fw-bold">Nombre de Usuario</label>
        <InputText class="form-control" @bind-Value="usuario.Nombre_usuario"></InputText>
        <ValidationMessage For="@(() => usuario.Nombre_usuario)"></ValidationMessage>
    </div>

    <div class="mt-4">
        <label class="form-label fw-bold">Clave</label>
        <InputText class="form-control" @bind-Value="usuario.Clave"></InputText>
        <ValidationMessage For="@(() => usuario.Clave)"></ValidationMessage>
    </div>

    <div class="mt-4">
        <label class="form-label fw-bold">Habilitado</label>
        <InputSelect class="form-select" @bind-Value="usuario.Habilitado">
            <option value="1">Si</option>
            <option value="0">No</option>
        </InputSelect>
        <ValidationMessage For="@(() => usuario.Habilitado)"></ValidationMessage>
    </div>

    <div class="mt-4">
        <label class="form-label fw-bold">Cambia Clave</label>
        <InputSelect class="form-select" @bind-Value="usuario.Cambia_clave">
            <option value="1">Si</option>
            <option value="0">No</option>
        </InputSelect>
        <ValidationMessage For="@(() => usuario.Cambia_clave)"></ValidationMessage>
    </div>

    <div class="mt-4">
        <label class="form-label fw-bold">Persona</label>
        <InputSelect class="form-select" @bind-Value="usuario.Id_persona">
            @foreach (var persona in personas)
            {
                <option value="@persona.Id_persona">@persona.Apellido, @persona.Nombre</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => usuario.Id_persona)"></ValidationMessage>
    </div>

    <div class="d-flex align-items-center justify-content-end mt-3">
        <a class="btn btn-warning" href="usuarios">Volver</a>

        <button class="btn btn-primary ms-2" type="submit">
            @btnTexto
        </button>
    </div>

</EditForm>


@code {
    [Parameter]
    public int idUsuario { get; set; } = 0;

    string titulo = string.Empty;
    string btnTexto = string.Empty;

    Usuario usuario = new Usuario();
    List<Persona> personas = new List<Persona>(); 

    protected override async Task OnInitializedAsync()
    {
        if (idUsuario != 0)
        {
            titulo = "Editar Usuario";
            btnTexto = "Actualizar";
            usuario = await UsuarioNegocio.GetOne(idUsuario);
        }
        else
        {
            titulo = "Nuevo Usuario";
            btnTexto = "Guardar";
        }
        personas = (List<Persona>) await PersonaNegocio.GetAll();
        personas = personas.OrderBy(per => per.Apellido).ThenBy(per => per.Nombre).ToList();
    }

    private async Task GuardarUsuario()
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se guardaran los cambios realizados",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "Cancelar",
                ConfirmButtonText = "Confirmar"
            });

        if (result.IsConfirmed)
        {
            if (idUsuario != 0)
            {
                UsuarioDTO usuarioDTO = new UsuarioDTO();
                usuarioDTO.Nombre_usuario = usuario.Nombre_usuario;
                usuarioDTO.Clave = usuario.Clave;
                usuarioDTO.Habilitado = usuario.Habilitado;
                usuarioDTO.Cambia_clave = usuario.Cambia_clave;
                usuarioDTO.Id_persona = usuario.Id_persona;

                await UsuarioNegocio.Update(idUsuario, usuarioDTO);
                await Swal.FireAsync("Usuario actualizado", "El usuario ha sido actualizado correctamente", SweetAlertIcon.Success);
            }
            else
            {
                if (usuario.Habilitado != 0 && usuario.Habilitado != 1)
                {
                    usuario.Habilitado = 1;
                }
                if (usuario.Cambia_clave != 0 && usuario.Cambia_clave != 1)
                {
                    usuario.Cambia_clave = 0;
                }
                if (usuario.Id_persona == 0)
                {
                    usuario.Id_persona = personas.First().Id_persona;
                }
                await UsuarioNegocio.Add(usuario);
                await Swal.FireAsync("Usuario creado", "El usuario ha sido creado correctamente", SweetAlertIcon.Success);
            }
            navegacion.NavigateTo("/usuarios");
        }

    }

}
