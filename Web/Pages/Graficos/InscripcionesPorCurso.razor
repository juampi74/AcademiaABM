@page "/inscripciones-por-curso"

@using Web.Pages.Autenticacion;

@using ChartJs.Blazor.BarChart;
@using ChartJs.Blazor.BarChart.Axes;

@inject NavigationManager navegacion;

@inject AuthService AuthService;

@if (cargando)
{
    <img class="pb-2" style="width:35px" src="/assets/loading.gif" />
}
else if (!rolAutorizado)
{
    <Unauthorized />
}
else
{
    @if (!errorBD)
    {
        @if (!errorSinInscripciones)
        {
            @if (inscripcionesPorCurso == null)
            {
                <div class="d-flex align-items-center">
                    <h2 class="me-3">Inscripciones por Curso</h2>
                    <img class="pb-2" style="width:35px" src="/assets/loading.gif" />
                </div>
            }
            else
            {
                <h2>Inscripciones por Curso</h2>
                <Chart Config="_config"></Chart>
            }
        }
        else
        {
            <h2>Inscripciones por Curso</h2>
            <div class="alert alert-warning fw-bold my-4" role="alert">
                No hay cursos registrados, o ninguno tiene inscripciones asociadas
            </div>
            <div class="d-flex justify-content-end">
                <a class="btn btn-warning" href="/">Volver</a>
            </div>
        }
    }
    else
    {
        <h2>Inscripciones por Curso</h2>
        <div class="alert alert-danger fw-bold my-3" role="alert">
            Error al conectarse a la base de datos!
        </div>
        <div class="d-flex justify-content-end">
            <a class="btn btn-dark" href="/">Volver</a>
        </div>
    }
}

@code {
    private BarConfig _config;

    private Dictionary<string, int> inscripcionesPorCurso;

    bool errorBD;
    bool errorSinInscripciones = false;
    
    bool cargando = true;
    bool rolAutorizado = false;

    protected override async Task OnInitializedAsync()
    {
        var authResult = await AuthService.IsAuthenticatedAsync();

        if (!authResult.IsAuthenticated)
        {
            navegacion.NavigateTo("/login");
        }
        else
        {
            if (authResult.Rol != "2")
            {
                rolAutorizado = false;
            }
            else
            {
                rolAutorizado = true;

                try
                {
                    inscripcionesPorCurso = (await InscripcionNegocio.GetInscripcionesPorCurso())
                                                .OrderBy(insCur => insCur.Key)
                                                    .ToDictionary(insCur => insCur.Key, insCur => insCur.Value);
                    
                    errorSinInscripciones = !(inscripcionesPorCurso.Values.Any(valor => valor != 0));

                    _config = new BarConfig
                        {
                            Options = new BarOptions
                            {
                                Responsive = true,
                                Title = new OptionsTitle
                                {
                                    Display = true,
                                    Text = "Inscripciones por Curso"
                                },
                                Scales = new BarScales
                                {
                                    YAxes = new List<CartesianAxis>
                                    {
                                        new BarLinearCartesianAxis
                                        {
                                            Ticks = new LinearCartesianTicks
                                            {
                                                BeginAtZero = true,
                                                StepSize = 1
                                            }
                                        }
                        
                                    }
                                }
                            }
                        };

                    foreach (string label in inscripcionesPorCurso.Keys.ToList())
                    {
                        _config.Data.Labels.Add(label);
                    }

                    BarDataset<int> dataset = new BarDataset<int>(inscripcionesPorCurso.Values.ToArray())
                        {
                            Label = "Cantidad de Inscripciones",
                            BackgroundColor = "rgba(7, 22, 60, 0.85)",
                            BorderColor = "rgba(7, 22, 60, 1)",
                            BorderWidth = 2
                        };
        
                    _config.Data.Datasets.Add(dataset);
                }
                catch (Exception)
                {
                    errorBD = true;
                }
            }
        }
        cargando = false;
    }
}