@page "/rendimiento-del-alumno"

@using Web.Pages.Autenticacion;

@using ChartJs.Blazor.PieChart;

@inject NavigationManager navegacion;

@inject AuthService AuthService;

@if (cargando)
{
    <img class="pb-2" style="width:35px" src="/assets/loading.gif" />
}
else if (!rolAutorizado)
{
    <Unauthorized />
}
else
{
    @if (!errorBD)
    {
        @if (!errorSinInscripciones)
        {
            @if (rendimientoAlumno == null)
            {
                <div class="d-flex align-items-center">
                    <h2 class="me-3">Tu rendimiento</h2>
                    <img class="pb-2" style="width:35px" src="/assets/loading.gif" />
                </div>
            }
            else
            {
                <h2>Tu rendimiento</h2>
                <Chart Config="_config"></Chart>
            }
        }
        else
        {
            <h2>Tu rendimiento</h2>
            <div class="alert alert-warning fw-bold my-4" role="alert">
                No tenés inscripciones registradas
            </div>
            <div class="d-flex justify-content-end">
                <a class="btn btn-warning" href="/">Volver</a>
            </div>
        }
    }
    else
    {
        <h2>Tu rendimiento</h2>
        <div class="alert alert-danger fw-bold my-3" role="alert">
            Error al conectarse a la base de datos!
        </div>
        <div class="d-flex justify-content-end">
            <a class="btn btn-dark" href="/">Volver</a>
        </div>
    }
}

@code {
    private PieConfig _config;

    private Dictionary<string, int> rendimientoAlumno;

    bool errorBD;
    bool errorSinInscripciones = false;

    bool cargando = true;
    bool rolAutorizado = false;

    protected override async Task OnInitializedAsync()
    {
        var authResult = await AuthService.IsAuthenticatedAsync();

        if (!authResult.IsAuthenticated)
        {
            navegacion.NavigateTo("/login");
        }
        else
        {
            if (authResult.Rol != "0")
            {
                rolAutorizado = false;
            }
            else
            {
                rolAutorizado = true;

                try
                {
                    IEnumerable<Alumno_Inscripcion> inscripcionesAlumno = await InscripcionNegocio.GetInscripcionesPorAlumno(authResult.IdPersona);

                    rendimientoAlumno = inscripcionesAlumno
                                          .GroupBy(inscripcion => inscripcion.Condicion)
                                          .ToDictionary(grupo => grupo.Key, grupo => grupo.Count());

                    errorSinInscripciones = !(rendimientoAlumno.Values.Any(valor => valor != 0));

                    _config = new PieConfig
                        {
                            Options = new PieOptions
                            {
                                Responsive = true,
                                Title = new OptionsTitle
                                {
                                    Display = true,
                                    Text = "Tu rendimiento"
                                },
                            }
                        };

                    foreach (string label in rendimientoAlumno.Keys.ToList())
                    {
                        _config.Data.Labels.Add(label);
                    }

                    _config.Data.Datasets.Add(new PieDataset<int>(rendimientoAlumno.Values.ToArray())
                        {
                            BackgroundColor = new[] { "rgba(8, 23, 61, 0.8)", "rgba(15, 32, 97, 0.8)", "rgba(25, 21, 88, 0.6)", "rgba(45, 11, 78, 0.8)", "rgba(57, 6, 71, 0.8)", "rgba(57, 5, 70, 0.8)", "rgba(58, 6, 71, 0.8)" },
                            BorderColor = "rgba(0, 0, 0, 1)",
                            BorderWidth = 2
                        });
                }
                catch (Exception)
                {
                    errorBD = true;
                }
            }
        }
        cargando = false;
    }
}