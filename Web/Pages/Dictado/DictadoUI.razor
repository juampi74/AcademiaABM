@page "/dictado"
@page "/dictado/{idDictado:int}"

@using Web.Pages.Autenticacion;

@inject SweetAlertService Swal;
@inject NavigationManager navegacion;

@inject AuthService AuthService;

@if (cargando)
{
    <img class="pb-2" style="width:35px" src="https://media.tenor.com/On7kvXhzml4AAAAj/loading-gif.gif" />
}
else if (!rolAutorizado)
{
    <Unauthorized />
}
else
{
    <h2 class="mt-2">@titulo</h2>

    @if (!errorBD)
    {
        @if (!errorFaltanEntidades)
        {
            <EditForm Model="dictado" OnValidSubmit="GuardarDictado">
                <DataAnnotationsValidator></DataAnnotationsValidator>

                <div class="mt-4">
                    <label class="form-label fw-bold">Docente</label>
                    <InputSelect class="form-select" @bind-Value="SelectedDocenteId" disabled="@camposDeshabilitados">
                        @foreach (var docente in docentes)
                        {
                            <option value="@docente.Id_persona">@docente.Apellido, @docente.Nombre</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => dictado.Id_docente)"></ValidationMessage>
                </div>
                
                <div class="mt-4">
                    <label class="form-label fw-bold">Curso</label>
                    <InputSelect class="form-select" @bind-Value="dictado.Id_curso" disabled="@camposDeshabilitados">
                        @foreach (var curso in cursos)
                        {
                            <option value="@curso.Id_curso">@curso.Materia.Desc_materia ➡️ @curso.Comision.Desc_comision</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => dictado.Id_curso)"></ValidationMessage>
                </div>
            
                <div class="mt-4">
                    <label class="form-label fw-bold">Cargo</label>
                    <InputText class="form-control" @bind-Value="dictado.Cargo" @oninput="ValidarCargo"></InputText>
                    @if (errorCargoInvalido)
                    {
                        <div class="text-danger mt-2">El cargo debe tener más de 10 caracteres.</div>
                    }
                </div>

                <div class="d-flex align-items-center justify-content-end mt-3">
                    <a class="btn btn-warning" href="dictados">Volver</a>

                    <button class="btn btn-primary ms-2" type="submit" disabled="@botonDeshabilitado">
                        @btnTexto
                    </button>
                </div>

            </EditForm>
        }
        else
        {
            <div class="alert alert-warning fw-bold my-3" role="alert">
                Debe haber al menos un docente y un curso registrados previamente!
            </div>
            <div class="d-flex justify-content-end">
                <a class="btn btn-dark" href="dictados">Volver</a>
            </div>
        }
    }
    else
    {
        <div class="alert alert-danger fw-bold my-3" role="alert">
            Error al conectarse a la base de datos!
        </div>
        <div class="d-flex justify-content-end">
            <a class="btn btn-dark" href="dictados">Volver</a>
        </div>
    }
}

@code {
    [Parameter]
    public int idDictado { get; set; } = 0;

    bool cargando = true;
    bool rolAutorizado = false;

    string titulo = string.Empty;
    string btnTexto = string.Empty;

    Docente_Curso dictado = new Docente_Curso();
    List<Persona> docentes = new List<Persona>();
    List<Curso> cursos = new List<Curso>();

    bool errorBD = false;
    bool errorFaltanEntidades = false;

    bool errorCargoInvalido = false;

    bool botonDeshabilitado = false;

    bool camposDeshabilitados = false;

    private int _selectedDocenteId;
    public int SelectedDocenteId
    {
        get => _selectedDocenteId;
        set
        {
            if (_selectedDocenteId != value)
            {
                _selectedDocenteId = value;
                OnDocenteSelected().ConfigureAwait(false);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authResult = await AuthService.IsAuthenticatedAsync();

        if (!authResult.IsAuthenticated)
        {
            navegacion.NavigateTo("/login");
        }
        else
        {
            if (authResult.Rol != "2")
            {
                rolAutorizado = false;
            }
            else
            {
                rolAutorizado = true;

                if (idDictado != 0)
                {
                    titulo = "Editar Dictado";
                    btnTexto = "Actualizar";

                    try
                    {
                        dictado = await DictadoNegocio.GetOne(idDictado);

                        docentes = (List<Persona>) await PersonaNegocio.GetAll();
                        SelectedDocenteId = dictado.Id_docente;

                        camposDeshabilitados = true;
                    }
                    catch (Exception)
                    {
                        errorBD = true;
                    }
                }
                else
                {
                    titulo = "Nuevo Dictado";
                    btnTexto = "Guardar";

                    botonDeshabilitado = true;

                    try
                    {
                        docentes = (List<Persona>) await PersonaNegocio.GetAll();
                        
                        if (docentes.Any())
                        {
                            docentes = docentes.Where(docente => docente.Tipo_persona == 1)
                                             .OrderBy(doc => doc.Apellido).ThenBy(doc => doc.Nombre)
                                             .ToList();

                            SelectedDocenteId = docentes.First().Id_persona;
                            dictado.Id_docente = SelectedDocenteId;

                            cursos = await CargarCursos();

                        }
                        else
                        {
                            errorFaltanEntidades = true;
                        }
                    }
                    catch (Exception)
                    {
                        errorBD = true;
                    }
                }
            }
        
            cargando = false;
        }
    }

    private async Task OnDocenteSelected()
    {
        dictado.Id_docente = SelectedDocenteId;
        cursos = await CargarCursos();
        StateHasChanged();
    }

    private async Task<List<Curso>> CargarCursos()
    {
        var cursos_docente = (List<Curso>) await CursoNegocio.GetCursosParaPersona(dictado.Id_docente.ToString());

        if (cursos_docente.Any())
        {
            cursos_docente = cursos_docente.OrderBy(cur => cur.Comision.Desc_comision).ThenBy(cur => cur.Materia.Desc_materia).ToList();

            if (idDictado != 0)
            {
                var curso = cursos_docente.FirstOrDefault(cur => cur.Id_curso == dictado.Id_curso);

                dictado.Id_curso = curso.Id_curso;

            }
            else
            {
                dictado.Id_curso = cursos_docente.First().Id_curso;
            }
        }

        return cursos_docente;
    }

    private void ValidarCargo(ChangeEventArgs e)
    {
        string? cargo = e.Value?.ToString();

        if (cargo == null || cargo.Length < 10)
        {
            errorCargoInvalido = true;
            botonDeshabilitado = true;
        }
        else
        {
            errorCargoInvalido = false;
            botonDeshabilitado = false;
        }
    }

    private async Task GuardarDictado()
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se guardaran los cambios realizados",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "Cancelar",
                ConfirmButtonText = "Confirmar"
            });

        if (result.IsConfirmed)
        {
            if (idDictado != 0)
            {
                Docente_CursoDTO dictadoDTO = new Docente_CursoDTO();

                dictadoDTO.Cargo = dictado.Cargo;
                dictadoDTO.Id_docente = dictado.Id_docente;
                dictadoDTO.Id_curso = dictado.Id_curso;

                HttpResponseMessage response = await DictadoNegocio.Update(idDictado, dictadoDTO);

                if (response.StatusCode == HttpStatusCode.OK)
                {
                    await Swal.FireAsync("Dictado actualizado", "El dictado ha sido actualizado correctamente", SweetAlertIcon.Success);
                }
                else if (response.StatusCode == HttpStatusCode.BadRequest)
                {
                    await Swal.FireAsync("Error", "La operación no se ha podido llevar a cabo", SweetAlertIcon.Error);
                }
                else if (response.StatusCode == HttpStatusCode.ServiceUnavailable)
                {
                    await Swal.FireAsync("Error", "Error al conectarse a la base de datos!", SweetAlertIcon.Error);
                }
            }
            else
            {
                if (dictado.Id_docente == 0)
                {
                    dictado.Id_docente = docentes.First().Id_persona;
                }

                if (dictado.Id_curso == 0)
                {
                    dictado.Id_curso = cursos.First().Id_curso;
                }

                HttpResponseMessage response = await DictadoNegocio.Add(dictado);

                if (response.StatusCode == HttpStatusCode.Created)
                {
                    await Swal.FireAsync("Dictado creado", "El dictado ha sido creado correctamente", SweetAlertIcon.Success);
                }
                else if (response.StatusCode == HttpStatusCode.Conflict)
                {
                    var mensaje = (await response.Content.ReadAsStringAsync()).Trim('"');

                    await Swal.FireAsync("Error", mensaje, SweetAlertIcon.Error);
                }
                else if (response.StatusCode == HttpStatusCode.BadRequest)
                {
                    await Swal.FireAsync("Error", "La operación no se ha podido llevar a cabo", SweetAlertIcon.Error);
                }
                else if (response.StatusCode == HttpStatusCode.ServiceUnavailable)
                {
                    await Swal.FireAsync("Error", "Error al conectarse a la base de datos!", SweetAlertIcon.Error);
                }
            }
            navegacion.NavigateTo("/dictados");
        }
    }
}