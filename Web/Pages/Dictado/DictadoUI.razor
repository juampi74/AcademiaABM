@page "/dictado"
@page "/dictado/{idDictado:int}"

@inject SweetAlertService Swal;
@inject NavigationManager navegacion;

<h2 class="mt-3">@titulo</h2>

@if (!errorBD)
{
    @if (!errorFaltanEntidades)
    {
        <EditForm Model="dictado" OnValidSubmit="GuardarDictado">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <div class="mt-4">
                <label class="form-label fw-bold">Curso</label>
                <InputSelect class="form-select" @bind-Value="dictado.Id_curso">
                    @foreach (var curso in cursos)
                    {
                        <option value="@curso.Id_curso">@curso.Materia.Desc_materia ➡️ @curso.Comision.Desc_comision</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => dictado.Id_curso)"></ValidationMessage>
            </div>

            <div class="mt-4">
                <label class="form-label fw-bold">Docente</label>
                <InputSelect class="form-select" @bind-Value="dictado.Id_docente">
                    @foreach (var docente in docentes)
                    {
                        <option value="@docente.Id_persona">@docente.Apellido, @docente.Nombre</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => dictado.Id_docente)"></ValidationMessage>
            </div>
            
            <div class="mt-4">
                <label class="form-label fw-bold">Cargo</label>
                <InputText class="form-control" @bind-Value="dictado.Cargo"></InputText>
                <ValidationMessage For="@(() => dictado.Cargo)"></ValidationMessage>
            </div>

            <div class="d-flex align-items-center justify-content-end mt-3">
                <a class="btn btn-warning" href="dictados">Volver</a>

                <button class="btn btn-primary ms-2" type="submit">
                    @btnTexto
                </button>
            </div>

        </EditForm>
    }
    else
    {
        <div class="alert alert-warning fw-bold my-4" role="alert">
            Debe haber al menos un docente y un curso registrados previamente!
        </div>
        <div class="d-flex justify-content-end">
            <a class="btn btn-warning" href="dictados">Volver</a>
        </div>
    }
}
else
{
    <div class="alert alert-danger fw-bold my-4" role="alert">
        Error al conectarse a la base de datos!
    </div>
    <div class="d-flex justify-content-end">
        <a class="btn btn-warning" href="dictados">Volver</a>
    </div>
}


@code {
    [Parameter]
    public int idDictado { get; set; } = 0;

    string titulo = string.Empty;
    string btnTexto = string.Empty;

    Docente_Curso dictado = new Docente_Curso();
    List<Persona> docentes = new List<Persona>();
    List<Curso> cursos = new List<Curso>();

    bool errorBD = false;
    bool errorFaltanEntidades = false;

    protected override async Task OnInitializedAsync()
    {
        if (idDictado != 0)
        {
            titulo = "Editar Dictado";
            btnTexto = "Actualizar";

            try
            {
                dictado = await DictadoNegocio.GetOne(idDictado);

                docentes = (List<Persona>) await PersonaNegocio.GetAll();
                cursos = (List<Curso>) await CursoNegocio.GetAll();

            }
            catch (Exception)
            {
                errorBD = true;
            }
        }
        else
        {
            titulo = "Nuevo Dictado";
            btnTexto = "Guardar";

            try
            {
                docentes = (List<Persona>) await PersonaNegocio.GetAll();
                cursos = (List<Curso>) await CursoNegocio.GetAll();

            }
            catch (Exception)
            {
                errorBD = true;
            }
        }

        if (docentes.Any() && cursos.Any())
        {
            docentes = docentes.Where(docente => docente.Tipo_persona == 1).ToList();

            docentes = docentes.OrderBy(doc => doc.Apellido).ThenBy(doc => doc.Nombre).ToList();
            cursos = cursos.OrderBy(cur => cur.Comision.Desc_comision).ThenBy(cur => cur.Materia.Desc_materia).ToList();
        }
        else
        {
            errorFaltanEntidades = true;
        }
    }

    private async Task GuardarDictado()
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se guardaran los cambios realizados",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "Cancelar",
                ConfirmButtonText = "Confirmar"
            });

        if (result.IsConfirmed)
        {
            if (idDictado != 0)
            {
                Docente_CursoDTO dictadoDTO = new Docente_CursoDTO();
                dictadoDTO.Cargo = dictado.Cargo;
                dictadoDTO.Id_docente = dictado.Id_docente;
                dictadoDTO.Id_curso = dictado.Id_curso;

                HttpResponseMessage response = await DictadoNegocio.Update(idDictado, dictadoDTO);

                if (response.StatusCode == HttpStatusCode.OK)
                {
                    await Swal.FireAsync("Dictado actualizado", "El dictado ha sido actualizado correctamente", SweetAlertIcon.Success);
                }
                else if (response.StatusCode == HttpStatusCode.BadRequest)
                {
                    await Swal.FireAsync("Error", "La operación no se ha podido llevar a cabo", SweetAlertIcon.Error);
                }
                else if (response.StatusCode == HttpStatusCode.ServiceUnavailable)
                {
                    await Swal.FireAsync("Error", "Error al conectarse a la base de datos!", SweetAlertIcon.Error);
                }
            }
            else
            {
                if (dictado.Id_docente == 0)
                {
                    dictado.Id_docente = docentes.First().Id_persona;
                }
                if (dictado.Id_curso == 0)
                {
                    dictado.Id_curso = cursos.First().Id_curso;
                }

                HttpResponseMessage response = await DictadoNegocio.Add(dictado);

                if (response.StatusCode == HttpStatusCode.Created)
                {
                    await Swal.FireAsync("Dictado creado", "El dictado ha sido creado correctamente", SweetAlertIcon.Success);
                }
                else if (response.StatusCode == HttpStatusCode.BadRequest)
                {
                    await Swal.FireAsync("Error", "La operación no se ha podido llevar a cabo", SweetAlertIcon.Error);
                }
                else if (response.StatusCode == HttpStatusCode.ServiceUnavailable)
                {
                    await Swal.FireAsync("Error", "Error al conectarse a la base de datos!", SweetAlertIcon.Error);
                }
            }
            navegacion.NavigateTo("/dictados");
        }
    }
}