@page "/inscripcion"
@page "/inscripcion/{idInscripcion:int}"

@using Web.Pages.Autenticacion;

@inject SweetAlertService Swal;
@inject NavigationManager navegacion;

@inject AuthService AuthService;

@if (cargando)
{
    <img class="pb-2" style="width:35px" src="https://media.tenor.com/On7kvXhzml4AAAAj/loading-gif.gif" />
}
else if (!rolAutorizado)
{
    <Unauthorized />
}
else
{
    <h2 class="mt-2">@titulo</h2>

    @if (!errorBD)
    {
        @if (!errorFaltanEntidades)
        {
            <EditForm Model="inscripcion" OnValidSubmit="GuardarInscripcion">
                <DataAnnotationsValidator></DataAnnotationsValidator>

                <div class="mt-4">
                    <label class="form-label fw-bold">Alumno</label>
                    <InputSelect class="form-select" @bind-Value="SelectedAlumnoId" disabled="@modoEdicion">
                        @foreach (var alumno in alumnos)
                        {
                            <option value="@alumno.Id_persona">@alumno.Apellido, @alumno.Nombre</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => inscripcion.Id_alumno)"></ValidationMessage>
                </div>

                <div class="mt-4">
                    <label class="form-label fw-bold">Curso</label>
                    <InputSelect class="form-select" @bind-Value="inscripcion.Id_curso" disabled="@modoEdicion">
                        @foreach (var curso in cursos)
                        {
                            <option value="@curso.Id_curso">@curso.Materia.Desc_materia ➡️ @curso.Comision.Desc_comision</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => inscripcion.Id_curso)"></ValidationMessage>
                </div>

                @if (modoEdicion)
                {
                    <div class="mt-4">
                        <label class="form-label fw-bold">Nota</label>
                        <InputNumber class="form-control" @bind-Value="inscripcion.Nota" @oninput="CalcularCondicion"></InputNumber>
                        @if (errorNotaInvalida)
                        {
                            <div class="text-danger mt-2">Por favor, ingrese una nota válida entre 1 y 10.</div>
                        }
                    </div>

                    <div class="mt-4">
                        <label class="form-label fw-bold">Condicion</label>
                        <InputText class="form-control" @bind-Value="condicionCalculada" disabled></InputText>
                    </div>
                }

                <div class="d-flex align-items-center justify-content-end mt-3">
                    <a class="btn btn-warning" href="inscripciones">Volver</a>
                    <button class="btn btn-primary ms-2" type="submit" disabled="@botonDeshabilitado">
                        @btnTexto
                    </button>
                </div>
            </EditForm>
        }
        else
        {
            <div class="alert alert-warning fw-bold my-3" role="alert">
                Debe haber al menos un alumno y un curso registrados previamente!
            </div>
            <div class="d-flex justify-content-end">
                <a class="btn btn-dark" href="inscripciones">Volver</a>
            </div>
        }
    }
    else
    {
        <div class="alert alert-danger fw-bold my-3" role="alert">
            Error al conectarse a la base de datos!
        </div>
        <div class="d-flex justify-content-end">
            <a class="btn btn-dark" href="inscripciones">Volver</a>
        </div>
    }
}

@code {
    [Parameter]
    public int idInscripcion { get; set; } = 0;

    bool cargando = true;
    bool rolAutorizado = false;
    string titulo = string.Empty;
    string btnTexto = string.Empty;
    bool modoEdicion => idInscripcion != 0;

    Alumno_Inscripcion inscripcion = new Alumno_Inscripcion();
    List<Persona> alumnos = new List<Persona>();
    List<Curso> cursos = new List<Curso>();

    bool errorBD = false;
    bool errorFaltanEntidades = false;
    bool errorNotaInvalida = false;
    bool botonDeshabilitado = true;
    string condicionCalculada = "";

    private int _selectedAlumnoId;
    public int SelectedAlumnoId
    {
        get => _selectedAlumnoId;
        set
        {
            if (_selectedAlumnoId != value)
            {
                _selectedAlumnoId = value;
                OnAlumnoSelected().ConfigureAwait(false);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authResult = await AuthService.IsAuthenticatedAsync();

        if (!authResult.IsAuthenticated)
        {
            navegacion.NavigateTo("/login");
        }
        else
        {
            if (authResult.Rol != "2")
            {
                rolAutorizado = false;
            }
            else
            {
                rolAutorizado = true;

                if (modoEdicion)
                {
                    titulo = "Editar Inscripcion";
                    btnTexto = "Actualizar";

                    try
                    {
                        inscripcion = await InscripcionNegocio.GetOne(idInscripcion);
                        condicionCalculada = inscripcion.Condicion;
                        
                        alumnos = (List<Persona>) await PersonaNegocio.GetAll();
                        SelectedAlumnoId = inscripcion.Id_alumno;

                    }
                    catch (Exception)
                    {
                        errorBD = true;
                    }
                }
                else
                {
                    titulo = "Nueva Inscripcion";
                    btnTexto = "Guardar";
                    inscripcion.Condicion = "Inscripto";

                    botonDeshabilitado = false;
                    
                    try
                    {
                        alumnos = (List<Persona>) await PersonaNegocio.GetAll();

                        if (alumnos.Any())
                        {
                            alumnos = alumnos.Where(alumno => alumno.Tipo_persona == 0)
                                             .OrderBy(alu => alu.Apellido).ThenBy(alu => alu.Nombre)
                                             .ToList();

                            SelectedAlumnoId = alumnos.First().Id_persona;
                            inscripcion.Id_alumno = SelectedAlumnoId;
                            cursos = await CargarCursos();

                        }
                        else
                        {
                            errorFaltanEntidades = true;
                        }
                    }
                    catch (Exception)
                    {
                        errorBD = true;
                    }
                }
            }

            cargando = false;
        }
    }

    private async Task OnAlumnoSelected()
    {
        inscripcion.Id_alumno = SelectedAlumnoId;
        cursos = await CargarCursos();
        StateHasChanged();
    }

    private async Task<List<Curso>> CargarCursos()
    {
        var cursos_alumno = (List<Curso>) await CursoNegocio.GetCursosParaPersona(inscripcion.Id_alumno.ToString());

        if (cursos_alumno.Any())
        {
            cursos_alumno = cursos_alumno.OrderBy(cur => cur.Materia.Desc_materia).ThenBy(cur => cur.Comision.Desc_comision).ToList();

            if (modoEdicion)
            {
                var curso = cursos_alumno.FirstOrDefault(cur => cur.Id_curso == inscripcion.Id_curso);

                inscripcion.Id_curso = curso.Id_curso;

            }
            else
            {
                inscripcion.Id_curso = cursos_alumno.First().Id_curso;
            }
        }

        return cursos_alumno;
    }

    private void CalcularCondicion(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int nota))
        {
            if (nota < 1 || nota > 10)
            {
                errorNotaInvalida = true;
                condicionCalculada = "Nota fuera de rango";
                botonDeshabilitado = true;
            }
            else
            {
                errorNotaInvalida = false;
                condicionCalculada = (nota < 4) ? "Libre" : (nota < 6) ? "Regular" : "Aprobado";
                botonDeshabilitado = false;
            }

            inscripcion.Condicion = condicionCalculada;
        }
        else
        {
            errorNotaInvalida = true;
            condicionCalculada = "Nota invalida";
            botonDeshabilitado = true;
        }
    }

    private async Task GuardarInscripcion()
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se guardaran los cambios realizados",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "Cancelar",
                ConfirmButtonText = "Confirmar"
            });

        if (result.IsConfirmed)
        {
            if (modoEdicion)
            {
                Alumno_InscripcionDTO inscripcionDTO = new Alumno_InscripcionDTO();

                inscripcionDTO.Condicion = inscripcion.Condicion;
                inscripcionDTO.Nota = inscripcion.Nota;
                inscripcionDTO.Id_alumno = inscripcion.Id_alumno;
                inscripcionDTO.Id_curso = inscripcion.Id_curso;

                HttpResponseMessage response = await InscripcionNegocio.Update(idInscripcion, inscripcionDTO);

                if (response.StatusCode == HttpStatusCode.OK)
                {
                    await Swal.FireAsync("Inscripcion actualizada", "La inscripcion ha sido actualizada correctamente", SweetAlertIcon.Success);
                }
                else if (response.StatusCode == HttpStatusCode.BadRequest)
                {
                    await Swal.FireAsync("Error", "La operación no se ha podido llevar a cabo", SweetAlertIcon.Error);
                }
                else if (response.StatusCode == HttpStatusCode.ServiceUnavailable)
                {
                    await Swal.FireAsync("Error", "Error al conectarse a la base de datos!", SweetAlertIcon.Error);
                }
            }
            else
            {
                if (inscripcion.Id_alumno == 0)
                {
                    inscripcion.Id_alumno = alumnos.First().Id_persona;
                }

                if (inscripcion.Id_curso == 0)
                {
                    inscripcion.Id_curso = cursos.First().Id_curso;
                }

                HttpResponseMessage response = await InscripcionNegocio.Add(inscripcion);

                if (response.StatusCode == HttpStatusCode.Created)
                {
                    await Swal.FireAsync("Inscripcion creada", "La inscripcion ha sido creada correctamente", SweetAlertIcon.Success);
                }
                else if (response.StatusCode == HttpStatusCode.Conflict)
                {
                    var mensaje = (await response.Content.ReadAsStringAsync()).Trim('"');

                    await Swal.FireAsync("Error", mensaje, SweetAlertIcon.Error);
                }
                else if (response.StatusCode == HttpStatusCode.BadRequest)
                {
                    await Swal.FireAsync("Error", "La operación no se ha podido llevar a cabo", SweetAlertIcon.Error);
                }
                else if (response.StatusCode == HttpStatusCode.ServiceUnavailable)
                {
                    await Swal.FireAsync("Error", "Error al conectarse a la base de datos!", SweetAlertIcon.Error);
                }
            }
            navegacion.NavigateTo("inscripciones");
        }
    }
}
