@page "/inscripciones"

@using Web.Pages.Autenticacion;

@inject SweetAlertService Swal;
@inject NavigationManager navegacion;

@inject AuthService AuthService;

@if (cargando)
{
    <img class="pb-2" style="width:35px" src="/assets/loading.gif" />
}
else if (!rolAutorizado)
{
    <Unauthorized />
}
else
{
    @if (!error)
    {
        @if (inscripciones == null)
        {
            <div class="d-flex align-items-center">
                <h2 class="me-3">Inscripciones</h2>
                <img class="pb-2" style="width:35px" src="/assets/loading.gif" />
            </div>
        }
        else
        {
            <div class="d-flex align-items-center justify-content-between">
                <h2>Inscripciones</h2>
                <a href="inscripcion">
                    <img class="pb-2" src="/assets/add.png" style="width: 60px; height: 60px" />
                </a>
            </div>

            <input @bind="busqueda" @bind:event="oninput" type="text" placeholder="Buscar por Condicion, Alumno, Comision o Materia..." class="form-control mt-2 mb-4 busqueda-input" />

            IEnumerable<Alumno_Inscripcion> inscripcionesFilt = inscripcionesFiltradas();

            @if (!inscripcionesFilt.Any())
            {
                <div class="alert alert-primary fw-bold mt-3" role="alert">
                    No hay inscripciones registradas o no hay resultados que coincidan con la búsqueda.
                </div>
            }
            else
            {
                <table class="table mt-3">
                    <thead>
                        <tr>
                            <th>Condicion</th>
                            <th>Nota</th>
                            <th>Alumno</th>
                            <th>Curso</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                            @foreach (var inscripcion in inscripcionesFilt)
                            {
                                <tr>
                                    <td style="vertical-align: middle;">@inscripcion.Condicion</td>
                                    <td style="vertical-align: middle;">@(inscripcion.Nota == 0 ? "-": @inscripcion.Nota)</td>
                                    <td style="vertical-align: middle;">@inscripcion.Alumno.Apellido, @inscripcion.Alumno.Nombre</td>
                                    <td style="vertical-align: middle;">@inscripcion.Curso.Materia.Desc_materia ➡️ @inscripcion.Curso.Comision.Desc_comision</td>
                                    
                                    <td class="d-flex justify-content-end">

                                        @if (inscripcion.Condicion != "Libre")
                                        {
                                            <a class="btn btn-primary btn-sm" href="inscripcion/@inscripcion.Id_inscripcion">
                                                <i class="bi bi-pencil-square fs-5"></i>
                                            </a>
                                        }
                                        else 
                                        {
                                            <a class="btn btn-primary btn-sm disabled-link" disabled>
                                                <i class="bi bi-pencil-square fs-5"></i>
                                            </a>
                                        }
                                        
                                        @if (inscripcion.Condicion == "Inscripto")
                                        {
                                            <button class="btn btn-danger btn-sm ms-2" @onclick="(() => EliminarInscripcion(inscripcion))">
                                                <i class="bi bi-trash-fill fs-5"></i>
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-danger btn-sm ms-2" disabled>
                                                <i class="bi bi-trash-fill fs-5"></i>
                                            </button>
                                        }

                                    </td>

                                </tr>
                            }
                    </tbody>
                </table>
            }
        }
    }
    else
    {
        <h2 class="mt-3">Inscripciones</h2>
        <div class="alert alert-danger fw-bold my-3" role="alert">
            Error al conectarse a la base de datos!
        </div>
        <div class="d-flex justify-content-end">
            <a class="btn btn-dark" href="/">Volver</a>
        </div>
    }
}

@code {
    IEnumerable<Alumno_Inscripcion> inscripciones;
    string busqueda = "";
    bool error;

    bool cargando = true;
    bool rolAutorizado = false;

    protected override async Task OnInitializedAsync()
    {
        var authResult = await AuthService.IsAuthenticatedAsync();

        if (!authResult.IsAuthenticated)
        {
            navegacion.NavigateTo("/login");
        }
        else
        {
            if (authResult.Rol != "2")
            {
                rolAutorizado = false;

            }
            else
            {
                rolAutorizado = true;
                await CargarInscripciones();
            }
        }
        cargando = false;
    }

    private async Task CargarInscripciones()
    {
        inscripciones = null;
        error = false;

        try
        {
            var condicionOrden = new Dictionary<string, int>
            {
                { "Aprobado", 0 },
                { "Regular", 1 },
                { "Libre", 2 },
                { "Inscripto", 3 }
            };

            inscripciones = (await InscripcionNegocio.GetAll())
                                .OrderBy(ins => condicionOrden[ins.Condicion])
                                    .ThenBy(ins => ins.Curso.Materia.Desc_materia)
                                       .ThenBy(ins => ins.Curso.Comision.Desc_comision)
                                          .ThenByDescending(ins => ins.Nota)
                                             .ThenBy(ins => ins.Alumno.Apellido)
                                                .ThenBy(ins => ins.Alumno.Nombre);
        }
        catch (Exception)
        {
            error = true;
        }
    }

    private IEnumerable<Alumno_Inscripcion> inscripcionesFiltradas()
    {
        if (string.IsNullOrWhiteSpace(busqueda))
        {
            return inscripciones ?? new List<Alumno_Inscripcion>();
        }

        return inscripciones?.Where(ins =>
               ins.Condicion.Contains(busqueda, StringComparison.OrdinalIgnoreCase) ||
              (ins.Alumno.Apellido + ", " + ins.Alumno.Nombre).Contains(busqueda, StringComparison.OrdinalIgnoreCase) ||
               ins.Curso.Comision.Desc_comision.Contains(busqueda, StringComparison.OrdinalIgnoreCase) ||
               ins.Curso.Materia.Desc_materia.Contains(busqueda, StringComparison.OrdinalIgnoreCase))
            ?? new List<Alumno_Inscripcion>();
    }

    private async Task EliminarInscripcion(Alumno_Inscripcion inscripcion)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Esta acción no se puede revertir",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                CancelButtonText = "Cancelar",
                ConfirmButtonText = "Confirmar"
            });

        if (result.IsConfirmed)
        {
            HttpResponseMessage response = await InscripcionNegocio.Delete(inscripcion);

            if (response.StatusCode == HttpStatusCode.OK)
            {
                await Swal.FireAsync("Inscripcion eliminada", "La inscripcion ha sido eliminada correctamente", SweetAlertIcon.Success);

                await CargarInscripciones();
            }
            else if (response.StatusCode == HttpStatusCode.BadRequest)
            {
                await Swal.FireAsync("Error", "La operación no se ha podido llevar a cabo", SweetAlertIcon.Error);
            }
            else if (response.StatusCode == HttpStatusCode.ServiceUnavailable)
            {
                error = true;
            }
        }
    }
}